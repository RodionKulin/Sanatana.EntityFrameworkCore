<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sanatana.EntityFrameworkCore.Batch</name>
    </assembly>
    <members>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.ColumnMapping.CommandArgs`1.SetExcludeAllByDefault(System.Boolean)">
            <summary>
            Set defaults when no property is selected.
            </summary>
            <param name="excludeAllByDefault"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.ColumnMapping.CommandArgs`1.SetExcludeDbGeneratedByDefault(Sanatana.EntityFrameworkCore.Batch.ColumnMapping.ExcludeOptions)">
            <summary>
            Set defaults for database generated properties when no property is selected.
            </summary>
            <param name="excludeDbGeneratedByDefault"></param>
            <returns></returns>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.ColumnMapping.CommandArgsBase`1.ExcludeAllByDefault">
            <summary>
            Set default to include all properties if no additional configuration provided. 
            If no properties are included, excluded or assigned.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.ColumnMapping.CommandArgsBase`1.ExcludeDbGeneratedByDefault">
            <summary>
            Set default to include database generated properties if no additional configuration provided. 
            If no properties are included, excluded or assigned.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.InsertCommand`1.Insert">
            <summary>
            List of columns to insert.
            Database generated properties are excluded by default.
            All other properties are included by default.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.InsertCommand`1.Output">
            <summary>
            List of properties to return for inserted rows. 
            Include properties that are generated on database side, like auto increment field.
            Returned values will be set to provided entities properties.
            Database generated or computed properties are included by default.
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCompareArgs`1.Condition``1(System.Linq.Expressions.Expression{System.Func{`0,`0,``0}})">
            <summary>
            Expression to compare properties from Target and Source tables. Example (t, s) => t.IntProperty == s.OtherIntProperty или (t, s) => t.IntProperty == 5
            where t - target table, s - source table.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCompareArgs`1.IncludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Include property to the list of compared properties.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCompareArgs`1.ExcludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Exclude property from list of compared properties.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCompareArgs`1.SetExcludeAllByDefault(System.Boolean)">
            <summary>
            Set defaults when no property is selected.
            </summary>
            <param name="excludeAllByDefault"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCompareArgs`1.SetExcludeDbGeneratedByDefault(Sanatana.EntityFrameworkCore.Batch.ColumnMapping.ExcludeOptions)">
            <summary>
            Set defaults for database generated properties when no property is selected.
            </summary>
            <param name="excludeDbGeneratedByDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.IncludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Include property to the list of inserted properties and extract value from entity.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.ExcludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Exclude property from list of inserted properties.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.IncludeValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Include property to the list of inserted properties with predefined value.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.IncludeDefaultValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Include property to the list of inserted properties with empty value.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.SetExcludeAllByDefault(System.Boolean)">
            <summary>
            Set defaults when no property is selected.
            </summary>
            <param name="excludeAllByDefault"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeInsertArgs`1.SetExcludeDbGeneratedByDefault(Sanatana.EntityFrameworkCore.Batch.ColumnMapping.ExcludeOptions)">
            <summary>
            Set defaults for database generated properties when no property is selected.
            </summary>
            <param name="excludeDbGeneratedByDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeUpdateArgs`1.Assign``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,`0,``0}})">
            <summary>
            Expression to update columns of Target table. Example: (t) => t.IntProperty, (t, s) => s.OtherIntProperty * 2
            where t - target table, s - source table.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="targetProperty"></param>
            <param name="assignedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeUpdateArgs`1.IncludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Include property to the list of updated properties.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeUpdateArgs`1.ExcludeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Exclude property from list of updated properties.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeUpdateArgs`1.SetExcludeAllByDefault(System.Boolean)">
            <summary>
            Set defaults when no property is selected.
            </summary>
            <param name="excludeAllByDefault"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeUpdateArgs`1.SetExcludeDbGeneratedByDefault(Sanatana.EntityFrameworkCore.Batch.ColumnMapping.ExcludeOptions)">
            <summary>
            Set defaults for database generated properties when no property is selected.
            </summary>
            <param name="excludeDbGeneratedByDefault"></param>
            <returns></returns>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.SqlTVPTypeName">
            <summary>
            Type of the Table Valued Parameter that is expected to be already created on SQL server before executing merge, describing order or Source columns. 
            Required when using merge constructor with TVP, not required if using SqlParameters constructor.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.SqlTVPParameterName">
            <summary>
            Name of the Table Valued Parameter that defaults to @Table. This can be any string.
            Required when using merge constructor with TVP, not required if using SqlParameters constructor.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.TableName">
            <summary>
            Target table name taken from EntityFramework settings by default. Can be changed manually.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.Source">
            <summary>
            List of columns to include as parameters to the query from provided Source entities.        /// 
            All properties are included by default.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.Compare">
            <summary>
            List of columns used to match Target table rows to Source rows.
            All properties are excluded by default.
            Parameter is required for all merge types except Insert. If not specified will insert all rows into Target table. 
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.UpdateMatched">
            <summary>
            Used if Update or Upsert type of merge is executed.
            List of columns to update on Target table for rows that did match Source rows.
            All properties are included by default.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.UpdateNotMatched">
            <summary>
            Used if Update type of merge is executed.
            List of columns to update on Target table for rows that did not match Source rows.
            All properties are excluded by default.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.Insert">
            <summary>
            Used if Insert or Upsert type of merge is executed.
            List of columns to insert.
            Database generated properties are excluded by default.
            All other properties are included by default.
            </summary>
        </member>
        <member name="P:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.Output">
            <summary>
            List of properties to return for inserted rows. 
            Include properties that are generated on database side, like auto increment field.
            Returned values will be set to provided entities properties.
            Database generated or computed properties are included by default.
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Merge entity into the table and pass values as SqlParameter.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.List{`0},System.Data.SqlClient.SqlTransaction)">
            <summary>
            Merge list of entities into the table and pass values as SqlParameter.
            </summary>
            <param name="context"></param>
            <param name="entityList"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Merge.MergeCommand`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.List{`0},System.String,System.String)">
            <summary>
            Merge list of entities into the table and pass values as TVP. Order of selected Source fields must match the order of columns in TVP declaration.
            </summary>
            <param name="context"></param>
            <param name="entityList"></param>
            <param name="sqlTVPTypeName"></param>
            <param name="sqlTVPParameterName"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.SelectPage``2(System.Int32,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Boolean)">
            <summary>
            Select a page of row, optionally getting total count of rows matching Where criteria.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOrder"></typeparam>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="descending"></param>
            <param name="whereExpression"></param>
            <param name="orderExpression"></param>
            <param name="countTotal"></param>
            <param name="pageIsZeroBased"></param>
            <returns>If page number starts from 0, otherwise from 1.</returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.SelectPageAsync``2(System.Int32,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Boolean)">
            <summary>
            Select a page of row, optionally getting total count of rows matching Where criteria.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOrder"></typeparam>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="descending"></param>
            <param name="whereExpression"></param>
            <param name="orderExpression"></param>
            <param name="countTotal"></param>
            <param name="pageIsZeroBased">If page number starts from 0, otherwise from 1.</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.SelectPageQuery``2(System.Int32,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Construct a query to select page of rows
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOrder"></typeparam>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="descending"></param>
            <param name="whereExpression"></param>
            <param name="orderExpression"></param>
            <param name="pageIsZeroBased">If page number starts from 0, otherwise from 1.</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.Merge``1(``0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Merge entity into the table and pass values as SqlParameters.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.Merge``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlTransaction)">
            <summary>
            Merge list of entities into the table and pass values as SqlParameters.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.Repository.MergeTVP``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Merge list of entities into the table and pass values as TVP. Order of selected Source fields must match the order of columns in TVP declaration.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entityList"></param>
            <param name="sqlTVPName"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Commands.UpdateCommand`1.Assign``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Expression to update columns of Target table. Example: (t) => t.IntProperty, (t) => t.OtherIntProperty * 2.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="targetProperty"></param>
            <param name="assignedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetTableName``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Get schema and name of the table used by EF.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetColumnName``1(Microsoft.EntityFrameworkCore.DbContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get name of the column used by EF.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="context">DbContext</param>
            <param name="property">Property of entity that is used to get column name</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetColumnName(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Linq.Expressions.MemberExpression)">
            <summary>
            Get name of the column used by EF.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">DbContext</param> 
            <param name="rootEntityType">Entity type to find property of. In case of owned entity specify parent entity type.</param>
            <param name="expression">Property of entity that is used to get column name.</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetColumnName(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.String)">
            <summary>
            Get name of the column used by EF.
            </summary>
            <param name="context">DbContext</param>
            <param name="rootEntityType">Entity type to find property of. In case of owned entity specify parent entity type.</param>
            <param name="propertyName">Property of entity. In case of owned entity specify propertyName of format of "NavigationProperty_OwnedEntityProperty".</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetDatabaseGeneratedProperties``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Get list of properties that configured to be DatabaseGenerated with option DatabaseGeneratedOption.Identity or DatabaseGeneratedOption.Computed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetDatabaseGeneratedProperties(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            Get list of properties that configured to be DatabaseGenerated with option DatabaseGeneratedOption.Identity or DatabaseGeneratedOption.Computed
            </summary>
            <param name="context"></param>
            <param name="rootEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetPropertyMapping(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.String)">
            <summary>
             Get IProperty configuration of the column used by EF.
            </summary>
            <param name="context">DbContext</param>
            <param name="rootEntityType">Entity type to find property of. In case of owned entity specify parent entity type.</param>
            <param name="propertyName">Property of entity. In case of owned entity specify propertyName of format of "NavigationProperty_OwnedEntityProperty".</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetAllMappedProperties``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Get list of all mapped properties for a given entity.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.DbContextExtensions.GetAllMappedProperties(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            Get list of all mapped properties for a given entity.
            </summary>
            <param name="context"></param>
            <param name="rootEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.EnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String})">
            <summary> 
            Create DataTable from entity list. 
            </summary> 
        </member>
        <member name="F:Sanatana.EntityFrameworkCore.Batch.Reflection.PropertyReflectionOptions.All">
            <summary>
            Take all.
            </summary>
        </member>
        <member name="F:Sanatana.EntityFrameworkCore.Batch.Reflection.PropertyReflectionOptions.IgnoreIndexer">
            <summary>
            Ignores indexer properties.
            </summary>
        </member>
        <member name="F:Sanatana.EntityFrameworkCore.Batch.Reflection.PropertyReflectionOptions.IgnoreEnumerable">
            <summary>
            Ignores all other IEnumerable properties
            except strings.
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetProperties``1(System.Reflection.BindingFlags,Sanatana.EntityFrameworkCore.Batch.Reflection.PropertyReflectionOptions)">
            <summary>
            Gets properties of T
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.IsIndexer(System.Reflection.PropertyInfo)">
            <summary>
            Check if property is indexer
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.IsEnumerable(System.Reflection.PropertyInfo)">
            <summary>
            Check if property implements IEnumerable
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetDefaultEfMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get expression member same as EF default naming. 
            Important for complex properties when EF is doing concatenation of names by default.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectMemberLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetDefaultEfMemberName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get expression member same as EF default naming. 
            Important for complex properties when EF is doing concatenation of names by default.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectMemberLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetMemberNamePath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get expression member same as EF default naming. 
            Important for complex properties when EF is doing concatenation of names by default.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectMemberLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetDefaultEfMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            Get expression member name same as EF default naming. 
            Important for complex properties when EF is doing concatenation of names by default.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectMemberLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.GetMemberPath(System.Linq.Expressions.MemberExpression)">
            <summary>
            Get member names path. 
            Important for complex properties when path includes property name and list embedded entities names.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectMemberLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.ConcatenateEfPropertyName(System.Collections.Generic.List{System.String})">
            <summary>
            Generate default name to owned entity property.
            </summary>
            <param name="hierarchyPropertyNames"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Reflection.ReflectionUtility.SplitEfPropertyName(System.String)">
            <summary>
            Split owned entity property into entity name part and property name part.
            </summary>
            <param name="defaultEfPropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Sanatana.EntityFrameworkCore.Batch.Scripts.ScriptInitializer">
            <summary>
            Database initializer that ensures database is created and executes sql scripts on database creation.
            </summary>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Scripts.SqlScript.DetermineType(System.String)">
            <summary>
            Find script type from it's content
            </summary>
            <param name="scriptContent">script</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.Scripts.SqlScript.DetermineObjectName(System.String)">
            <summary>
            Find created object name from content
            </summary>
            <param name="scriptContent">script</param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.SqlRowNumberZeroBased(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get range numbers for SQL rows numbering, where input Page number is expected to start from 0.
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.ToSkipNumberZeroBased(System.Int32,System.Int32)">
            <summary>
            Get number of rows to skip, where input Page number is expected to start from 0.
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.SqlRowNumberOneBased(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get range numbers for SQL rows numbering, where input Page number is expected to start from 1.
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.ToSkipNumberOneBased(System.Int32,System.Int32)">
            <summary>
            Get number of rows to skip, where input Page number is expected to start from 1.
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.ToSmallDateTime(System.DateTime)">
            <summary>
            Update C# Datetime value to fit in expected MSSQL small datetime format, 
            where 1900.1.1 12:00:00 is minimum value and 2079.6.6 11:59:59 is maximum value.
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:Sanatana.EntityFrameworkCore.Batch.SqlUtility.ToSqlTime(System.TimeSpan)">
            <summary>
            Update C# TimeSpan to fit in expected MSSQL time format,
            where 0 is minimum value and 23 hours, 59 minute, 59 seconds, 999 is maximum value.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
    </members>
</doc>
